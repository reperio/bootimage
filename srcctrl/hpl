##
# Get a known-good copy of:
# hpl
# 

if [ ${ARCH} = "x86" ]; then
  ACML=gfortran32_mp
  MKL=mkl/lib/32
else
  ACML=gfortran64_mp
  MKL=mkl/lib/em64t
fi

if [ ${USEGOTO} ]; then
  SRCSUFFIXAMD='_Goto'
  SRCSUFFIXINTEL=''
fi

. ./functions

fetch () { 
  get ftp://ftp.mcs.anl.gov/pub/mpi/mpich.tar.gz
  if [ $? != 0 ]; then
    return 1
  fi
  get http://www.netlib.org/benchmark/hpl/hpl.tgz
  if [ $? != 0 ]; then
    return 1
  fi
  
  if [ ! ${USEGOTO} ]; then
#    if [ ! -e ${SRCDIR}/${ACML} ]; then
#      echo "The AMD Core Math Library is missing. Due to dist. restrictions, you must obtain this tarball manually. Check out http://www.amd.com/acml -- this library is required to actually place AMD CPU's under a sufficient level of stress as to reveal any defects. File missing is ${SRCDIR}/${ACML}"
#      if [ ${DISABLEAMD} ]; then
#        echo "AMD disabled; ignoring."
#      else
#        return 1
#      fi
#    fi
    
    if [ ! -d ${SRCDIR}/${MKL} ]; then
      echo "The Intel MKL is missing. Due to dist. restrictions, you must obtain this tarball manually. Check out http://www.intel.com/products/software -- this library is required to actually place Intel CPU's under a sufficient level of stress as to reveal any defects. When running their installer (install.sh), set the prefix to ${SRCDIR}/mkl. File missing is ${SRCDIR}/${MKL}"
      return 1
    fi
  else
    echo "Goto Enabled"
  fi
}


unpack () {
  cd ${SRCDIR}
  
  untar mpich.tar.gz mpich-1.2.7p1
  if [ $? != 0 ]; then
    return 1
  fi
  
  untar hpl.tgz hpl
  if [ $? != 0 ]; then
    return 1
  fi
}

build () {
  cd ${SRCDIR}/mpich-1.2.7p1
  if [ ! -e config.log ]; then
    ./configure --with-device=ch_shmem --prefix=/usr/local/bootimage-mpich
    if [ $? != 0 ]; then
      return 1
    fi
    
    make
    if [ $? != 0 ]; then
      return 1
    fi
  fi
  
  cd ${SRCDIR}/mpich-1.2.7p1  
  make install
  if [ $? != 0 ]; then
    return 1
  fi
  # these two add about 10MB to the uncompressed ramfs
  rm -rf /usr/local/bootimage-mpich/doc
  rm -rf /usr/local/bootimage-mpich/man
  
  cd ${SRCDIR}/hpl
  
  cp -v ${TOPDIR}/patches/Make.Linux* ./
  
  if [ ${ARCH} = "x86" ]; then
    if [ ! ${USEGOTO} ]; then
      # Build AMD against ACML
      make arch=Linux_AMD_32
    else
      # Build AMD against Goto
      make arch=Linux_AMD_32_Goto
    fi
    if [ $? != 0 ]; then
      if [ ${DISABLEAMD} ]; then
        echo "AMD disabled; ignoring."
      else
        return 1
      fi
    fi
    
    if [ ! ${USEGOTO} ]; then
      # Build Intel against MKL
      make arch=Linux_Intel_32
    else
      # Build Intel against Goto
      make arch=Linux_Intel_32_Goto
    fi
    if [ $? != 0 ]; then
      return 1
    fi
  else
#    if [ ! ${USEGOTO} ]; then
#      # Build AMD against ACML
#      make arch=Linux_AMD_64
#    else
#      # Build AMD against Goto
#      make arch=Linux_AMD_64_Goto
#    fi
#    if [ $? != 0 ]; then
#      if [ ${DISABLEAMD} ]; then
#        echo "AMD disabled; ignoring."
#      else
#        return 1
#      fi
#    fi
    
    if [ ! ${USEGOTO} ]; then
      # Build Intel against MKL
      make arch=Linux_Intel_64
    else
      # Build Intel against Goto
      #make arch=Linux_Intel_64_Goto
      make arch=Linux_Intel_64
    fi
    if [ $? != 0 ]; then
      return 1
    fi
  fi
}

install () {
  # this is insanely stupid but required because mpiinstall hard-codes
  # the paths to everything inside the supporting MPI scripts
  mv -v /usr/local/bootimage-mpich ${STAGEDIR}/usr/local
  if [ $? != 0 ]; then
    return 1
  fi
  
  if [ ${ARCH} = "x86" ]; then
    cp -av ${SRCDIR}/hpl/bin/Linux_AMD_32${SRCSUFFIXAMD}/xhpl ${STAGEDIR}/usr/local/bin/xhpl.amd
    cp -av ${SRCDIR}/hpl/bin/Linux_Intel_32${SRCSUFFIX}/xhpl ${STAGEDIR}/usr/local/bin/xhpl.intel
  else
    cp -av ${SRCDIR}/hpl/bin/Linux_AMD_64${SRCSUFFIXAMD}/xhpl ${STAGEDIR}/usr/local/bin/xhpl.amd
    cp -av ${SRCDIR}/hpl/bin/Linux_Intel_64${SRCSUFFIX}/xhpl ${STAGEDIR}/usr/local/bin/xhpl.intel
  fi
}

$1 $2

if [ $? != 0 ]; then
  printf 'Source control script %s failed on function %s\n' $0 $1
  exit 1
fi


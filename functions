##
# COMMON FUNCTIONS FILE
#

eval `stty size 2>/dev/null | (read L C; echo LINES=${L:-24} COLUMNS=${C:-80})`

if [ "${NO_ANSI}" == "1" ];
then
	ANSI_GREEN=""
	ANSI_RED=""
	ANSI_BLUE=""
	ANSI_PURPLE=""
	ANSI_LEFT=" - "
	ANSI_DONE=""
else
	ANSI_GREEN="\033[1;32m"
	ANSI_RED="\033[1;31m"
	ANSI_BLUE="\033[1;34m"
	ANSI_PURPLE="\033[1;35m"
	ANSI_LEFT="\033[${COLUMNS}G\033[10D"
	ANSI_DONE="\033[0m"
fi

get () {
  _URL=$1
  _FILENAME=`basename ${_URL}`

  if [ -e "${SRCDIR}/${_FILENAME}" ]; then
    return 0
  else
    cd ${SRCDIR}
    echo "" >&2
    wget -c ${_URL}
    if [ $? != 0 ]; then
      printf 'Could not fetch %s' ${_URL}
      return 1
    fi
    return 0
  fi
}

fetch () { 
  #FIXME - add some kind of age checking
  get ${URL}
}

git_fetch () {
  _URL=$1
  _DIRNAME=$2

  if [ -e ${SRCDIR}/${_DIRNAME}/.git ]
  then
     cd ${SRCDIR}/${_DIRNAME}
     git pull -q
  else
     cd ${SRCDIR}
     git clone -q ${_URL}
  fi
}


untar () {
  _FILENAME=$1
  _DIRNAME=$2
  
  # skip it if already extracted
  if [ -d ${SRCDIR}/${_DIRNAME} ]
  then
    return 0
  fi

  cd ${SRCDIR}
  tar xvf ${_FILENAME}
  return ${?}
}

unpack () {
  if [ $1 ]; then
    _FILENAME=$1
    _DIRNAME=$2
  else
    _FILENAME=${FILENAME}
    _DIRNAME=${DIRNAME}
  fi
  untar ${_FILENAME} ${_DIRNAME}
}

checkdone () {
  #  short ciruit a build operation on the calling script
  if [ -f ${SRCDIR}/${DIRNAME}/.buildfoo ]; then
    BUILDFOO=$(cat ${SRCDIR}/${DIRNAME}/.buildfoo)
    if [ ${CONFIGOPTIONS} ]; then
      if [ ${CONFIGOPTIONS} = ${BUILDFOO} ]; then
        exit 0
      fi
    fi
    exit 0
  fi
}

markdone () {
  echo ${CONFIGOPTIONS} > ${SRCDIR}/${DIRNAME}/.buildfoo
}

build () {
  checkdone
  cd ${SRCDIR}/${DIRNAME}
  ./configure ${CONFIGOPTIONS}
  if [ $? != 0 ]; then
    return 1
  fi
  make clean
  make
  if [ $? != 0 ]; then
    return 1
  fi
  markdone
}

install () {
  cd ${SRCDIR}/${DIRNAME}
  for file in ${BINARIES}; do
    cp -vp ${file} ${STAGEDIR}/usr/bin
    if [ $? != 0 ]; then
      echo "Copying a required binary ${file} failed. Please check $0"
      return 1
    fi
  done

  for file in ${SBINARIES}; do
    cp -vp ${file} ${STAGEDIR}/usr/sbin
    if [ $? != 0 ]; then
      echo "Copying a required sbin binary ${file} failed. Please check $0"
      return 1
    fi
  done

  for file in ${LIBRARIES}; do
    cp -vp ${file} ${STAGEDIR}/usr/lib
    if [ $? != 0 ]; then
      echo "Copying a required library ${file} failed. Please check $0"
      return 1
    fi
  done
}

